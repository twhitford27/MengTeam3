/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "CO_app_STM32.h"
#include "CANopen.h"
#include "../CANopenNode/301/CO_SDOclient.h"
#include "PID.h"
#include <stdio.h>
#include <stdlib.h>

uint8_t SDO_count = 0;
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
uint32_t measurement_i;
float measurement  = 0;
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
CAN_HandleTypeDef hcan2;

TIM_HandleTypeDef htim14;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
double rated_speed = 3000*0.1047197551; //motor constant
double motor_speed = 2500*0.1047197551;  //will be read by ADC
double network_freq = 49.75; //meeasured by freq. detection code
double target_speed = 3000*0.1047197551; //will be set by PC / Potentiometer
double torque_ref = 8.30; //calculated by calcTORQUE function
double torque_rated = 13.40; //motor constant
float torque_calc_PID = 0;
uint32_t CAN_torque_ref_PID = 0;
#define PID_KP  20.0f
#define PID_KI  190.0f
float t = 0;
//#define PID_KD  0.25f

//#define PID_TAU 0.02f

#define PID_LIM_MIN -4.69f
#define PID_LIM_MAX  4.69f

#define PID_LIM_MIN_INT -4.69f
#define PID_LIM_MAX_INT  4.69f

#define SAMPLE_TIME_S 0.01f

/* Maximum run-time of simulation */
#define SIMULATION_TIME_MAX 400000000.0f


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_CAN2_Init(void);
static void MX_TIM14_Init(void);
/* USER CODE BEGIN PFP */
/*CANopen function definitions -----------------------------------------
------*/

CO_SDO_abortCode_t read_SDO(CO_SDOclient_t *SDO_C, uint8_t nodeId,
 uint16_t index, uint8_t subIndex,
 uint8_t *buf, size_t bufSize, size_t
*readSize)
{
	SDO_count = 0;
 CO_SDO_return_t SDO_ret;

 // setup client (this can be skipped, if remote device don't change)
 SDO_ret = CO_SDOclient_setup(SDO_C,
 CO_CAN_ID_SDO_CLI + nodeId,
CO_CAN_ID_SDO_SRV + nodeId,
nodeId);
 if (SDO_ret != CO_SDO_RT_ok_communicationEnd) {
 return CO_SDO_AB_GENERAL;
 }

 // initiate upload
 SDO_ret = CO_SDOclientUploadInitiate(SDO_C, index, subIndex, 1000,
false);
 if (SDO_ret != CO_SDO_RT_ok_communicationEnd) {
 return CO_SDO_AB_GENERAL;
 }

 // upload data
 do {
 uint32_t timeDifference_us = 10000;
 CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 SDO_ret = CO_SDOclientUpload(SDO_C,
 timeDifference_us,
false,
&abortCode,
NULL, NULL, NULL);

 SDO_count++;
 if (SDO_count == 10){
	 SDO_ret=-10;
 }

 if (SDO_ret < 0) {
 return abortCode;
 }

 HAL_Delay(1);
 } while(SDO_ret > 0);
 // copy data to the user buffer (for long data function must be called
 // several times inside the loop)
 *readSize = CO_SDOclientUploadBufRead(SDO_C, buf, bufSize);
 return CO_SDO_AB_NONE;
}


CO_SDO_abortCode_t write_SDO(CO_SDOclient_t *SDO_C, uint8_t nodeId,
 uint16_t index, uint8_t subIndex,
 uint8_t *data, size_t dataSize)
{
	SDO_count = 0;
 CO_SDO_return_t SDO_ret;
 bool_t bufferPartial = false;

 // setup client (this can be skipped, if remote device is the same)
 SDO_ret = CO_SDOclient_setup(SDO_C,
 CO_CAN_ID_SDO_CLI + nodeId,
CO_CAN_ID_SDO_SRV + nodeId,
nodeId);
 if (SDO_ret != CO_SDO_RT_ok_communicationEnd) {
 return -1;
 }

 // initiate download
 SDO_ret = CO_SDOclientDownloadInitiate(SDO_C, index, subIndex,
 dataSize, 1000, false);
 if (SDO_ret != CO_SDO_RT_ok_communicationEnd) {
 return -1;
 }

 // fill data
 size_t nWritten = CO_SDOclientDownloadBufWrite(SDO_C, data,
dataSize);
 if (nWritten < dataSize) {
 bufferPartial = true;
 // If SDO Fifo buffer is too small, data can be refilled in the loop.
 }

 //download data
 do {
 uint32_t timeDifference_us = 10000;
 CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 SDO_ret = CO_SDOclientDownload(SDO_C,
 timeDifference_us,
false,
bufferPartial,
&abortCode,
NULL, NULL);

 SDO_count++;
  if (SDO_count == 10){
 	 SDO_ret=-10;
  }

 if (SDO_ret < 0) {
 return abortCode;
 }

 HAL_Delay(1);

 } while(SDO_ret > 0);
 return CO_SDO_AB_NONE;
}
/*End of CANopen function definition -----------------------------------
------*/
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Simulated dynamical system (first order) */
//float TestSystem_Update(float inp);
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
    /* Initialise PID controller */
    PIDController pid = { PID_KP, PID_KI, //PID_KD,
                          //PID_TAU,
                          PID_LIM_MIN, PID_LIM_MAX,
			  PID_LIM_MIN_INT, PID_LIM_MAX_INT,
                          SAMPLE_TIME_S };

    PIDController_Init(&pid);
    /* Simulate response using test system */
    float setpoint = 1100*0.1047197551;

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_CAN2_Init();
  MX_TIM14_Init();
  /* USER CODE BEGIN 2 */
  //Code required for CANopen setup
   CANopenNodeSTM32 canopenNodeSTM32;
   canopenNodeSTM32.CANHandle = &hcan2; //CAN module used in the MCU
   canopenNodeSTM32.HWInitFunction = MX_CAN2_Init;
   canopenNodeSTM32.timerHandle = &htim14; //TIM14 selected as the interrupt timer
   canopenNodeSTM32.desiredNodeID = 32; //The node address of the micro-controller
   canopenNodeSTM32.baudrate = 500; //Desired baud rate for transmission
   canopen_app_init(&canopenNodeSTM32);

   uint32_t amount_Read = 0;
//  printf("Time (s)\tSystem Output\tControllerOutput\r\n");

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // for (float t = 0.0f; t <= SIMULATION_TIME_MAX; t += SAMPLE_TIME_S) {


		  //Read the speed variable
		 	  read_SDO(canopenNodeSTM32.canOpenStack->SDOclient, 0x01, 0x2003, 0x02, &measurement_i, 4, &amount_Read);
	           /* Get measurement from system */

	           measurement = ((float)measurement_i)*0.1047197551/(10);

	 //        		  TestSystem_Update(pid.out);

	           /* Compute new control signal */
	           PIDController_Update(&pid, setpoint, measurement);
	           torque_calc_PID = pid.out;
	           CAN_torque_ref_PID = ((torque_calc_PID/torque_rated))*10000;
	           //Write the Torque reference variable
	           write_SDO(canopenNodeSTM32.canOpenStack->SDOclient, 0x01, 0x2004, 0x08, &CAN_torque_ref_PID, 4);
	           //printf("%f\t%f\t%f\r\n", t, measurement, pid.out);
	           //Required at the end of every exchange
	           	  canopen_app_process();
	          	t += SAMPLE_TIME_S;

	      // }



	   //    return 0;
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{

  /* USER CODE BEGIN CAN2_Init 0 */

  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
  hcan2.Init.Prescaler = 6;
  hcan2.Init.Mode = CAN_MODE_NORMAL;
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
  hcan2.Init.TimeTriggeredMode = DISABLE;
  hcan2.Init.AutoBusOff = DISABLE;
  hcan2.Init.AutoWakeUp = DISABLE;
  hcan2.Init.AutoRetransmission = ENABLE;
  hcan2.Init.ReceiveFifoLocked = DISABLE;
  hcan2.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}

/**
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
  htim14.Init.Prescaler = 83;
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim14.Init.Period = 1000;
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
//float TestSystem_Update(float inp) {

//    static float output = 0.0f;
//    static const float alpha = 0.02f;

//    output = (SAMPLE_TIME_S * inp + output) / (1.0f + alpha * SAMPLE_TIME_S);

//    return output;
//}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
